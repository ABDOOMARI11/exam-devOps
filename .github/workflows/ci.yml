name: CI/CD Pipeline Python

# Déclencheurs du workflow
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

# Variables d'environnement globales
env:
  PYTHON_VERSION: '3.8'

# Définition des jobs
jobs:
  # Job de test et vérification
  test:
    name: Tests et Vérifications Python
    runs-on: ubuntu-latest
    
    # Matrice pour tester plusieurs versions de Python
    strategy:
      matrix:
        python-version: ['3.8',  '3.10', '3.11']
    
    steps:
    # Étape 1: Récupération du code
    - name: Checkout du code
      uses: actions/checkout@v4
    
    # Étape 2: Configuration de Python
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    # Étape 3: Cache des dépendances pip
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    # Étape 4: Installation des dépendances
    - name: Installation des dépendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Installation des outils de développement
        pip install pytest pytest-cov flake8 black isort
    
    # Étape 5: Vérification du formatage avec Black
    - name: Vérification du formatage avec Black
      run: black --check .
    
    # Étape 6: Vérification des imports avec isort
    - name: Vérification des imports avec isort
      run: isort --check-only .
    
    # Étape 7: Analyse statique avec flake8
    - name: Analyse statique avec flake8
      run: flake8 .
    
    # Étape 8: Exécution des tests avec pytest
    - name: Exécution des tests avec pytest
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html
    
    # Étape 9: Upload du rapport de couverture
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    # Étape 10: Exécution de votre script ci.yml personnalisé
    - name: Exécution du script CI personnalisé
      run: |
        # Si votre ci.yml est un script Python
        if [ -f "ci.py" ]; then
          python ci.py
        fi
        
        # Si votre ci.yml est un script bash
        if [ -f "ci.yml" ] && [ -x "ci.yml" ]; then
          chmod +x ci.yml
          ./ci.yml
        fi
        
        # Si c'est un fichier de configuration YAML à traiter
        if [ -f "ci.yml" ]; then
          echo "Contenu du fichier ci.yml:"
          cat ci.yml
        fi

  # Job de build et packaging
  build:
    name: Build et Package Python
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Installation des outils de build
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        pip install -r requirements.txt
    
    - name: Build du package Python
      run: |
        python -m build
    
    # Sauvegarde des artifacts de build
    - name: Upload des artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/

  # Job de sécurité avec Bandit
  security:
    name: Analyse de sécurité
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Installation de Bandit
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml]
    
    - name: Analyse de sécurité avec Bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
    
    - name: Upload du rapport Bandit
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  # Job de déploiement (optionnel)
  deploy:
    name: Déploiement
    runs-on: ubuntu-latest
    needs: [test, build, security]
    # Ne s'exécute que sur la branche main et si c'est un tag
    if: github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Download des artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package
        path: dist/
    
    - name: Installation de twine
      run: |
        python -m pip install --upgrade pip
        pip install twine
    
    - name: Publication sur PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*